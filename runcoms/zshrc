#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export PATH=$HOME/bin:$HOME/homebrew/bin:$PATH # set this instead in zprofile for non-interactive shells if needed
export MANPAGER='less -X'                      # don't clear the screen after quitting man page

if type brew &>/dev/null; then
  export HOMEBREW_PREFIX=$(brew --prefix)
  fpath=("$HOMEBREW_PREFIX/share/zsh/site-functions" $fpath)
  autoload -Uz compinit
  compinit

  export MANPATH=$HOMEBREW_PREFIX/share/man:$MANPATH
  export EDITOR="$HOMEBREW_PREFIX/bin/mate -w" # assumes textmate is installed (or will be)

  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_DEVELOPER=1
  export HOMEBREW_CACHE=$HOME'/Library/Caches/Homebrew'
  export HOMEBREW_CASK_OPTS='--prefpanedir=/Library/PreferencePanes'

  function brewd { echo ${=$(brew deps -n --include-build --include-requirements $1 ${(s/ /)${@:2}} | grep -v ':')} }        # brewd for zsh
  # function brewd { echo "$(brew deps -n --include-build --include-requirements $1 ${@:2} | grep -v ':' | tr '\n' ' ')" ; } # brewd for bash
  alias brewib='brewi --force-bottle'
  alias brewis='brewi -s'
  alias brewus='brewu -s'
  alias brewx='brew uninstall --force'
  alias casku='brew cu --all'
  alias caskua='casku --yes'
  alias caskum='casku --interactive'
  alias caskx='cask uninstall --force'
  alias daily-brew='caskum && brewus && brewc'
fi

alias dotfile-update='git -C "$HOME/.dotfiles" pull origin master'
alias zpme-update='git -C "$HOME/.zprezto" pull origin working'
alias dz-update='dotfile-update && zpme-update'
function zpupstream-update() {
  cd $HOME/.zprezto
  git checkout master
  git pull
  git submodule update --init --recursive
  git checkout working
}
alias -- -='cd -'
alias homedir='cd $HOME/Documents'
alias relink='ln -sfn'
alias h='history -50'
alias findcmd='history -1000 | grep'
alias asearch='alias | grep'
alias procnum='ps -ef | grep'
alias sha256='shasum -a 256'
alias fullfilepath='find . -type f' # HOW DO I USE THIS AGAIN?
alias xp='xplanet -num_times 1'
alias xpfx='xplanetFX --gui'
alias te='open -e'
function iso2img() {
  _filename=${1//".iso"/""}
  hdiutil convert -format UDRW -o $_filename.iso
  if [ $? -eq 0 ]; then
    mv $_filename.img.dmg $_filename.img
  fi
} # test if this works
# alias iso2img='hdiutil convert -format UDRW -o' # usage: iso2img <DEST> <SOURCE>; and remember to rename .img.dmg to .img
alias del-chrome-fav='rm $HOME/Library/Application\ Support/Google/Chrome/Default/Favicons'
alias g-reset='git reset --hard HEAD'
alias g-push='git push -f origin'
alias g-dlup='git checkout master && git fetch upstream && git merge upstream/master'
alias g-branchff='git merge master'
function g-mc() { git rebase --interactive HEAD~"$1"; }

function fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/textmate/textmate.plugin.zsh
# If the tm command is called without an argument, open TextMate in the current directory
# If tm is passed a directory, cd to it and open it in TextMate
# If tm is passed anything else (i.e., a list of files and/or options), pass them all along
#    This allows easy opening of multiple files.
function tm() {
  if [[ -z $1 ]]; then
    mate .
  elif [[ -d $1 ]]; then
    mate $1
    cd $1
  else
    mate "$@"
  fi
}

# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/forklift/forklift.plugin.zsh
# Open folder in ForkLift.app or ForkLift2.app from console
# Author: Adam Strzelecki nanoant.com, modified by Bodo Tasche bitboxer.de
#         Updated to support ForkLift 2 and ForkLift 3 by Johan Kaving
#
# Usage:
#   fl [<folder>]
#
# Opens specified directory or current working directory in ForkLift.app
#
# Notes:
# It assumes Shift+Cmd+G launches go to folder panel and Cmd+N opens new
# app window.
#
# https://gist.github.com/3313481
function fl() {
  if [ ! -z "$1" ]; then
    DIR=$1
    if [ ! -d "$DIR" ]; then
      DIR=$(dirname $DIR)
    fi
    if [ "$DIR" != "." ]; then
      PWD=$(
        cd "$DIR"
        pwd
      )
    fi
  fi
  osascript 2>&1 1>/dev/null <<END

  try
    tell application "Finder"
        set forkLift3 to name of application file id "com.binarynights.ForkLift-3"
    end tell
  on error err_msg number err_num
    set forkLift3 to null
  end try
  try
    tell application "Finder"
        set forkLift2 to name of application file id "com.binarynights.ForkLift2"
    end tell
  on error err_msg number err_num
    set forkLift2 to null
  end try
  try
    tell application "Finder"
        set forkLift to name of application file id "com.binarynights.ForkLift"
    end tell
  on error err_msg number err_num
    set forkLift to null
  end try

  if forkLift3 is not null and application forkLift3 is running then
    tell application forkLift3
        activate
        set forkLiftVersion to version
    end tell
  else if forkLift2 is not null and application forkLift2 is running then
    tell application forkLift2
        activate
        set forkLiftVersion to version
    end tell
  else if forkLift is not null and application forkLift is running then
    tell application forkLift
        activate
        set forkLiftVersion to version
    end tell
  else
    if forkLift3 is not null then
        set appName to forkLift3
    else if forkLift2 is not null then
        set appName to forkLift2
    else if forkLift is not null then
        set appName to forkLift
    end if
    
    tell application appName
        activate
        set forkLiftVersion to version
    end tell
    repeat until application appName is running
        delay 1
    end repeat
    tell application appName
        activate
    end tell
  end if

  tell application "System Events"
    tell application process "ForkLift"
        try
            set topWindow to window 1
        on error
            keystroke "n" using command down
            set topWindow to window 1
        end try
        keystroke "g" using {command down, shift down}
        if forkLiftVersion starts with "3" then
            tell pop over of list of group of splitter group of splitter group of topWindow
                set value of text field 1 to "$PWD"
            end tell
        else
            tell sheet 1 of topWindow
                set value of text field 1 to "$PWD"
            end tell
        end if
        keystroke return
    end tell
  end tell
END
}

if [ -f $HOME/.zshrc.local ]; then
  source $HOME/.zshrc.local
fi
